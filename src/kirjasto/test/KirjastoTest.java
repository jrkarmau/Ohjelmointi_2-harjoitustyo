package kirjasto.test;
// Generated by ComTest BEGIN
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java.io.File;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.junit.Assert.*;
import org.junit.*;
import java.nio.file.Files;
import kirjasto.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.23 15:48:36 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjastoTest {
    //



  // Generated by ComTest BEGIN
  /** 
   * testEtsi89 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi89() throws SailoException {    // Kirjasto: 89
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|1993|otava|123-456-0-33333-2| kauhu|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("3|Tuntematon sotilas      |kissa kirjoittaja |suomi   |1985|WSOY|752-123-2-34658-5 | kaunokirjallisuus|"); 
    Kirja kirja4 = new Kirja(); kirja4.parse("4|Rautatie                |Juhani Aho|"); 
    Kirja kirja5 = new Kirja(); kirja5.parse("5|Harry Potter            |Rowling           |suomi|"); 
    kirjasto.lisaa(kirja1); kirjasto.lisaa(kirja2); kirjasto.lisaa(kirja3); kirjasto.lisaa(kirja4); kirjasto.lisaa(kirja5); 
    ArrayList<Kirja> loytyneet = new  ArrayList<Kirja>(); 
    loytyneet = kirjasto.etsi("*rr*",0); 
    assertEquals("From: Kirjasto line: 101", 2, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 102", true, loytyneet.get(0) == kirja1); 
    assertEquals("From: Kirjasto line: 103", true, loytyneet.get(1) == kirja5); 
    loytyneet = kirjasto.etsi("*suo*",2); 
    assertEquals("From: Kirjasto line: 105", 3, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 106", true, loytyneet.get(0) == kirja2); 
    assertEquals("From: Kirjasto line: 107", true, loytyneet.get(1) == kirja3); 
    assertEquals("From: Kirjasto line: 108", true, loytyneet.get(2) == kirja5); 
    loytyneet = kirjasto.etsi(null,-1); 
    assertEquals("From: Kirjasto line: 110", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaKirja122 
   * @throws SailoException when error
   */
  @Test
  public void testPoistaKirja122() throws SailoException {    // Kirjasto: 122
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kir1 = new Kirja(), kir2 = new Kirja(), kir3 = new Kirja(); 
    kir1.rekisteroi(); kir2.rekisteroi(); kir3.rekisteroi(); 
    kirjasto.lisaa(kir1); kirjasto.lisaa(kir2); kirjasto.lisaa(kir3); 
    assertEquals("From: Kirjasto line: 128", 3, kirjasto.getKirjoja()); 
    kirjasto.poistaKirja(kir1); 
    assertEquals("From: Kirjasto line: 130", 2, kirjasto.getKirjoja()); 
    kirjasto.poistaKirja(kir2); 
    assertEquals("From: Kirjasto line: 132", 1, kirjasto.getKirjoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaKommentti146 
   * @throws SailoException when error
   */
  @Test
  public void testPoistaKommentti146() throws SailoException {    // Kirjasto: 146
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(); kirjasto.lisaa(kirja1); 
    Kirja kirja2 = new Kirja(); kirjasto.lisaa(kirja2); 
    kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |WSOY |2004|343-467-0-23456-1 |200 |fantasia|"); 
    Kommentti kom11 = new Kommentti(2); kirjasto.lisaa(kom11); 
    Kommentti kom22 = new Kommentti(1); kirjasto.lisaa(kom22); 
    Kommentti kom33 = new Kommentti(2); kirjasto.lisaa(kom33); 
    kom11.parse("4  | 2 |  otsikko2  |  tekstiätekstiä  "); 
    kom22.parse("5  | 2 |  otsikko21  |  tekstiätekstiä  "); 
    kom33.parse("3  | 2 |  otsikko212  |  tekstiätekstiä  "); 
    List<Kommentti> loytyneet; 
    loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 161", 3, loytyneet.size()); 
    kirjasto.poistaKommentti(kom22); 
    loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 164", 2, loytyneet.size()); 
    kirjasto.poistaKommentti(kom11); 
    loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 167", 1, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta180 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta180() throws SailoException {    // Kirjasto: 180
    String hakemisto = "testikirjasto"; 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    String kirjat = "testikirjasto/kirjat.dat"; 
    String kommentit = "testikirjasto/kommentit.dat"; 
    File ftied1 = new File(kirjat); 
    File ftied2 = new File(kommentit); 
    ftied1.delete(); 
    ftied2.delete(); 
    Kirjasto kirjasto = new Kirjasto(); 
    try {
    kirjasto.lueTiedostosta(hakemisto); 
    fail("Kirjasto: 194 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    Kirja kirja1 = new Kirja(); kirjasto.lisaa(kirja1); 
    Kirja kirja2 = new Kirja(); kirjasto.lisaa(kirja2); 
    Kirja kirja3 = new Kirja(); kirjasto.lisaa(kirja3); 
    kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|otava|1993|123-456-0-33333-2 |150 | kauhu|"); 
    kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |WSOY |2004|343-467-0-23456-1 |200 |fantasia|"); 
    kirja3.parse("3|Tuntematon sotilas      |essi esimerkki    |suomi   |WSOY |1985|752-123-2-34658-5 |489 |kaunokirjallisuus|"); 
    Kommentti kom1 = new Kommentti(); kirjasto.lisaa(kom1); 
    Kommentti kom2 = new Kommentti(); kirjasto.lisaa(kom2); 
    Kommentti kom3 = new Kommentti(); kirjasto.lisaa(kom3); 
    kom1.parse("4  | 2 |  otsikko2  |  tekstiätekstiä  "); 
    kom2.parse("5  | 1 |  otsikko21  |  tekstiätekstiä  "); 
    kom3.parse("3  | 2 |  otsikko212  |  tekstiätekstiä  "); 
    kirjasto.tallenna(); 
    kirjasto = new Kirjasto(); 
    kirjasto.setTiedosto(hakemisto); 
    kirjasto.lueTiedostosta(hakemisto); 
    List<Kommentti> loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 212", 2, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 213", kirja1.toString(), kirjasto.annaKirja(0).toString()); 
    assertEquals("From: Kirjasto line: 214", kirja3.toString(), kirjasto.annaKirja(2).toString()); 
    assertEquals("From: Kirjasto line: 215", true, ftied1.delete()); 
    assertEquals("From: Kirjasto line: 216", true, ftied2.delete()); 
    assertEquals("From: Kirjasto line: 217", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKommentit273 */
  @Test
  public void testAnnaKommentit273() {    // Kirjasto: 273
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|1993|otava|123-456-0-33333-2| kauhu|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("5|Tuntematon sotilas      |kissa kirjoittaja |suomi   |1985|WSOY|752-123-2-34658-5 | kaunokirjallisuus|"); 
    Kirja kirja4 = new Kirja(); 
    Kommentti kom11 = new Kommentti(2); kirjasto.lisaa(kom11); 
    Kommentti kom22 = new Kommentti(1); kirjasto.lisaa(kom22); 
    Kommentti kom33 = new Kommentti(2); kirjasto.lisaa(kom33); 
    Kommentti kom44 = new Kommentti(1); kirjasto.lisaa(kom44); 
    Kommentti kom55 = new Kommentti(2); kirjasto.lisaa(kom55); 
    Kommentti kom66 = new Kommentti(5); kirjasto.lisaa(kom66); 
    List<Kommentti> loytyneet; 
    loytyneet = kirjasto.annaKommentit(kirja4); 
    assertEquals("From: Kirjasto line: 288", 0, loytyneet.size()); 
    loytyneet = kirjasto.annaKommentit(kirja1); 
    assertEquals("From: Kirjasto line: 290", 2, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 291", true, loytyneet.get(0) == kom22); 
    assertEquals("From: Kirjasto line: 292", true, loytyneet.get(1) == kom44); 
    loytyneet = kirjasto.annaKommentit(kirja3); 
    assertEquals("From: Kirjasto line: 294", 1, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 295", true, loytyneet.get(0) == kom66); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa307 */
  @Test
  public void testLisaa307() {    // Kirjasto: 307
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|1993|otava|123-456-0-33333-2| kauhu|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("5|Tuntematon sotilas      |kissa kirjoittaja |suomi   |1985|WSOY|752-123-2-34658-5 | kaunokirjallisuus|"); 
    Kirja kirja4 = new Kirja(); 
    Kommentti kom11 = new Kommentti(2); kirjasto.lisaa(kom11); 
    Kommentti kom22 = new Kommentti(1); kirjasto.lisaa(kom22); 
    Kommentti kom33 = new Kommentti(2); kirjasto.lisaa(kom33); 
    Kommentti kom44 = new Kommentti(1); kirjasto.lisaa(kom44); 
    Kommentti kom55 = new Kommentti(2); kirjasto.lisaa(kom55); 
    Kommentti kom66 = new Kommentti(5); kirjasto.lisaa(kom66); 
    List<Kommentti> loytyneet; 
    loytyneet = kirjasto.annaKommentit(kirja4); 
    assertEquals("From: Kirjasto line: 322", 0, loytyneet.size()); 
    loytyneet = kirjasto.annaKommentit(kirja1); 
    assertEquals("From: Kirjasto line: 324", 2, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 325", true, loytyneet.get(0) == kom22); 
    assertEquals("From: Kirjasto line: 326", true, loytyneet.get(1) == kom44); 
    loytyneet = kirjasto.annaKommentit(kirja3); 
    assertEquals("From: Kirjasto line: 328", 1, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 329", true, loytyneet.get(0) == kom66); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa341 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa341() throws SailoException {    // Kirjasto: 341
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja11 = new Kirja(); kirjasto.lisaa(kirja11); 
    Kirja kirja22 = new Kirja(); kirjasto.lisaa(kirja22); 
    kirja11.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|1993|otava|123-456-0-33333-2| kauhu|"); 
    kirja22.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kirja kirja33 = new Kirja(); 
    kirja33.parse("3|Tuntematon sotilas      |kissa kirjoittaja |suomi   |1985|WSOY|752-123-2-34658-5 | kaunokirjallisuus|"); 
    Kirja kirja44 = new Kirja(); 
    kirja44.parse("1|Rautatie |Juhani Aho|"); 
    assertEquals("From: Kirjasto line: 352", kirja11, kirjasto.annaKirja(0)); 
    kirjasto.korvaaTaiLisaa(kirja33); 
    assertEquals("From: Kirjasto line: 354", kirja33, kirjasto.annaKirja(2)); 
    assertEquals("From: Kirjasto line: 355", 3, kirjasto.getKirjoja()); 
    kirjasto.korvaaTaiLisaa(kirja44); 
    assertEquals("From: Kirjasto line: 357", kirja44.toString(), kirjasto.annaKirja(0).toString()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa370 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa370() throws SailoException {    // Kirjasto: 370
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja2 = new Kirja(); 
    kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kommentti kom11 = new Kommentti(2); kirjasto.lisaa(kom11); 
    Kommentti kom22 = new Kommentti(2); kirjasto.lisaa(kom22); 
    kom11.parse("1  | 2 |  testi1  |  tekstiä1  "); 
    kom22.parse("2  | 2 |  testi2  |  tekstiä2  "); 
    Kommentti kom33 = new Kommentti(2); 
    kom33.parse("3  | 2 |  testi3  |  tekstiä3  "); 
    Kommentti kom44 = new Kommentti(2); 
    kom44.parse("1  | 2 |  testi4  |  tekstiä4  "); 
    List<Kommentti> loytyneet; 
    loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 386", "testi1", loytyneet.get(0).getOtsikko()); 
    kirjasto.korvaaTaiLisaa(kom33); 
    loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 389", 3, loytyneet.size()); 
    kirjasto.korvaaTaiLisaa(kom44); 
    loytyneet = kirjasto.annaKommentit(kirja2); 
    assertEquals("From: Kirjasto line: 392", "testi4", loytyneet.get(0).getOtsikko()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaKirja406 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaKirja406() throws SailoException {    // Kirjasto: 406
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(); kirja1.taytaKirjanTiedot(); 
    Kirja kirja2 = new Kirja(); kirja2.taytaKirjanTiedot(); 
    Kirja kirja3 = new Kirja(); kirja3.taytaKirjanTiedot(); 
    Kirja kirja4 = new Kirja(); kirja4.taytaKirjanTiedot(); 
    Kirja kirja5 = new Kirja(); kirja5.taytaKirjanTiedot(); 
    kirjasto.lisaa(kirja1); 
    kirjasto.lisaa(kirja2); 
    kirjasto.lisaa(kirja3); 
    kirjasto.lisaa(kirja4); 
    kirjasto.lisaa(kirja5); 
    assertEquals("From: Kirjasto line: 420", kirja1.toString(), kirjasto.annaKirja(0).toString()); 
    assertEquals("From: Kirjasto line: 421", kirja3.toString(), kirjasto.annaKirja(2).toString()); 
    assertEquals("From: Kirjasto line: 422", kirja5.toString(), kirjasto.annaKirja(4).toString()); 
    assertEquals("From: Kirjasto line: 423", kirja2, kirjasto.annaKirja(1)); 
    assertEquals("From: Kirjasto line: 424", kirja4, kirjasto.annaKirja(3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa446 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa446() throws SailoException {    // Kirjasto: 446
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    assertEquals("From: Kirjasto line: 450", 0, kirjasto.getKirjoja()); 
    kirjasto.lisaa(kirja1); assertEquals("From: Kirjasto line: 451", 1, kirjasto.getKirjoja()); 
    kirjasto.lisaa(kirja2); assertEquals("From: Kirjasto line: 452", 2, kirjasto.getKirjoja()); 
    kirjasto.lisaa(kirja1); assertEquals("From: Kirjasto line: 453", 3, kirjasto.getKirjoja()); 
    assertEquals("From: Kirjasto line: 454", kirja1, kirjasto.annaKirja(0)); 
    assertEquals("From: Kirjasto line: 455", kirja2, kirjasto.annaKirja(1)); 
    assertEquals("From: Kirjasto line: 456", kirja1, kirjasto.annaKirja(2)); 
    assertEquals("From: Kirjasto line: 457", false, kirjasto.annaKirja(1) == kirja1); 
    assertEquals("From: Kirjasto line: 458", true, kirjasto.annaKirja(1) == kirja2); 
    try {
    assertEquals("From: Kirjasto line: 459", kirja1, kirjasto.annaKirja(3)); 
    fail("Kirjasto: 459 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLuoTiedostot471 */
  @Test
  public void testLuoTiedostot471() {    // Kirjasto: 471
    Kirjasto kirjasto = new Kirjasto(); 
    File f = new File("testikansio"); 
    File fKirjat = new File("testikansio/kirjat.dat"); 
    File fKommentit = new File("testikansio/kommentit.dat"); 
    assertEquals("From: Kirjasto line: 477", false, f.exists()); 
    assertEquals("From: Kirjasto line: 478", false, fKirjat.exists()); 
    assertEquals("From: Kirjasto line: 479", false, fKommentit.exists()); 
    kirjasto.luoTiedostot("testikansio"); 
    assertEquals("From: Kirjasto line: 481", true, fKirjat.exists()); 
    assertEquals("From: Kirjasto line: 482", true, fKommentit.exists()); 
    assertEquals("From: Kirjasto line: 483", true, fKirjat.delete()); 
    assertEquals("From: Kirjasto line: 484", true, fKommentit.delete()); 
    assertEquals("From: Kirjasto line: 485", true, f.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLaskeTilastot506 
   * @throws SailoException when error
   */
  @Test
  public void testLaskeTilastot506() throws SailoException {    // Kirjasto: 506
    ByteArrayOutputStream outContent = new ByteArrayOutputStream(); 
    PrintStream ps = new PrintStream(outContent, true); 
    Kirjasto kirjasto = new Kirjasto(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|otava|1993|123-456-0-33333-2 |150 | kauhu|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|Täällä pohjantähden alla|jaakko jaakonpoika|suomi   |WSOY |2004|343-467-0-23456-1 |200 |fantasia|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("3|Tuntematon sotilas      |essi esimerkki    |suomi   |WSOY |1985|752-123-2-34658-5 |489 |kaunokirjallisuus|"); 
    Kirja kirja4 = new Kirja(); kirja4.parse("4|Rautatie                |Juhani Aho"); 
    Kirja kirja5 = new Kirja(); kirja5.parse("5|Harry Potter            |Rowling"); 
    kirjasto.lisaa(kirja1); kirjasto.lisaa(kirja2); kirjasto.lisaa(kirja3); kirjasto.lisaa(kirja4); kirjasto.lisaa(kirja5); 
    kirjasto.laskeTilastot(ps); 
    String vastaus = ("Kirjoja on kirjastossa: 5\r\n" +
    "Eniten kirjoja on kirjoittanut: essi esimerkki\r\n" +
    "Suosituin genre on: kauhu\r\n" +
    "Pisin kirja on: Tuntematon sotilas\r\n" +
    "Tuorein julkaistu kirja on: Täällä pohjantähden alla\r\n"); 
    assertEquals("From: Kirjasto line: 525", true, outContent.toString().equals(vastaus)); 
  } // Generated by ComTest END
}