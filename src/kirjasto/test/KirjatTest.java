package kirjasto.test;
// Generated by ComTest BEGIN
import java.util.ArrayList;
import java.io.File;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.junit.Assert.*;
import org.junit.*;
import kirjasto.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.22 10:38:38 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** 
   * testPoista82 
   * @throws SailoException when error
   */
  @Test
  public void testPoista82() throws SailoException {    // Kirjat: 82
    Kirjat kirjat = new Kirjat(); 
    Kirja kir1 = new Kirja(), kir2 = new Kirja(), kir3 = new Kirja(); 
    kir1.rekisteroi(); kir2.rekisteroi(); kir3.rekisteroi(); 
    int id1 = kir1.getKirjanID(); 
    kirjat.lisaa(kir1); kirjat.lisaa(kir2); kirjat.lisaa(kir3); 
    assertEquals("From: Kirjat line: 89", 3, kirjat.getLkm()); 
    kirjat.poista(id1); 
    assertEquals("From: Kirjat line: 91", 2, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 92", -1, kirjat.etsiId(id1)); 
    kirjat.poista(id1+1); 
    assertEquals("From: Kirjat line: 94", 1, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 95", -1, kirjat.etsiId(id1+1)); 
    assertEquals("From: Kirjat line: 96", 0, kirjat.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId115 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId115() throws SailoException {    // Kirjat: 115
    Kirjat kirjat = new Kirjat(); 
    Kirja kir1 = new Kirja(), kir2 = new Kirja(), kir3 = new Kirja(); 
    kir1.rekisteroi(); kir2.rekisteroi(); kir3.rekisteroi(); 
    int id1 = kir1.getKirjanID(); 
    kirjat.lisaa(kir1); kirjat.lisaa(kir2); kirjat.lisaa(kir3); 
    assertEquals("From: Kirjat line: 122", -1, kirjat.etsiId(5)); 
    assertEquals("From: Kirjat line: 123", -1, kirjat.etsiId(12)); 
    assertEquals("From: Kirjat line: 124", -1, kirjat.etsiId(-1)); 
    assertEquals("From: Kirjat line: 125", 0, kirjat.etsiId(id1)); 
    assertEquals("From: Kirjat line: 126", 2, kirjat.etsiId(id1+2)); 
    assertEquals("From: Kirjat line: 127", 1, kirjat.etsiId(id1+1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi144 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi144() throws SailoException {    // Kirjat: 144
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|1993|otava|123-456-0-33333-2| kauhu|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|T채채ll채 pohjant채hden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("3|Tuntematon sotilas      |kissa kirjoittaja |suomi   |1985|WSOY|752-123-2-34658-5 | kaunokirjallisuus|"); 
    Kirja kirja4 = new Kirja(); kirja4.parse("4|Rautatie                |Juhani Aho|"); 
    Kirja kirja5 = new Kirja(); kirja5.parse("5|Harry Potter            |Rowling           |suomi|"); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); kirjat.lisaa(kirja4); kirjat.lisaa(kirja5); 
    ArrayList<Kirja> loytyneet = new  ArrayList<Kirja>(); 
    loytyneet = kirjat.etsi("*rr*",0); 
    assertEquals("From: Kirjat line: 156", 2, loytyneet.size()); 
    assertEquals("From: Kirjat line: 157", true, loytyneet.get(0) == kirja1); 
    assertEquals("From: Kirjat line: 158", true, loytyneet.get(1) == kirja5); 
    loytyneet = kirjat.etsi("*suo*",2); 
    assertEquals("From: Kirjat line: 160", 3, loytyneet.size()); 
    assertEquals("From: Kirjat line: 161", true, loytyneet.get(0) == kirja2); 
    assertEquals("From: Kirjat line: 162", true, loytyneet.get(1) == kirja3); 
    assertEquals("From: Kirjat line: 163", true, loytyneet.get(2) == kirja5); 
    loytyneet = kirjat.etsi(null,-1); 
    assertEquals("From: Kirjat line: 165", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta186 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta186() throws SailoException {    // Kirjat: 186
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.taytaKirjanTiedot(); 
    Kirja kirja2 = new Kirja(); kirja2.taytaKirjanTiedot(); 
    Kirja kirja3 = new Kirja(); kirja3.taytaKirjanTiedot(); 
    Kirja kirja4 = new Kirja(); kirja4.taytaKirjanTiedot(); 
    Kirja kirja5 = new Kirja(); kirja5.taytaKirjanTiedot(); 
    String tiedNimi = "testikirjat.dat"; 
    File ftied = new File(tiedNimi); 
    ftied.delete(); 
    try {
    kirjat.lueTiedostosta(tiedNimi); 
    fail("Kirjat: 198 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja2); 
    kirjat.lisaa(kirja3); 
    kirjat.lisaa(kirja4); 
    kirjat.lisaa(kirja5); 
    kirjat.tallenna(); 
    kirjat = new Kirjat(); 
    kirjat.lueTiedostosta(tiedNimi); 
    assertEquals("From: Kirjat line: 207", kirja1.toString(), kirjat.anna(0).toString()); 
    assertEquals("From: Kirjat line: 208", kirja3.toString(), kirjat.anna(2).toString()); 
    assertEquals("From: Kirjat line: 209", kirja5.toString(), kirjat.anna(4).toString()); 
    kirjat.tallenna(); 
    kirjat.lueTiedostosta(tiedNimi); 
    assertEquals("From: Kirjat line: 212", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTallenna271 
   * @throws SailoException when error
   */
  @Test
  public void testTallenna271() throws SailoException {    // Kirjat: 271
    String tiedNimi = "testikirjat.dat"; 
    File ftied = new File(tiedNimi); 
    ftied.delete(); 
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.taytaKirjanTiedot(); 
    Kirja kirja2 = new Kirja(); kirja2.taytaKirjanTiedot(); 
    Kirja kirja3 = new Kirja(); kirja3.taytaKirjanTiedot(); 
    Kirja kirja4 = new Kirja(); kirja4.taytaKirjanTiedot(); 
    Kirja kirja5 = new Kirja(); kirja5.taytaKirjanTiedot(); 
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja2); 
    kirjat.lisaa(kirja3); 
    kirjat.lisaa(kirja4); 
    kirjat.lisaa(kirja5); 
    kirjat.tallenna(tiedNimi); 
    kirjat = new Kirjat(); 
    kirjat.lueTiedostosta(tiedNimi); 
    assertEquals("From: Kirjat line: 291", kirja1.toString(), kirjat.anna(0).toString()); 
    assertEquals("From: Kirjat line: 292", kirja3.toString(), kirjat.anna(2).toString()); 
    assertEquals("From: Kirjat line: 293", kirja5.toString(), kirjat.anna(4).toString()); 
    assertEquals("From: Kirjat line: 294", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnna328 
   * @throws SailoException when error
   */
  @Test
  public void testAnna328() throws SailoException {    // Kirjat: 328
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.taytaKirjanTiedot(); 
    Kirja kirja2 = new Kirja(); kirja2.taytaKirjanTiedot(); 
    Kirja kirja3 = new Kirja(); kirja3.taytaKirjanTiedot(); 
    Kirja kirja4 = new Kirja(); kirja4.taytaKirjanTiedot(); 
    Kirja kirja5 = new Kirja(); kirja5.taytaKirjanTiedot(); 
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja2); 
    kirjat.lisaa(kirja3); 
    kirjat.lisaa(kirja4); 
    kirjat.lisaa(kirja5); 
    assertEquals("From: Kirjat line: 342", kirja1.toString(), kirjat.anna(0).toString()); 
    assertEquals("From: Kirjat line: 343", kirja3.toString(), kirjat.anna(2).toString()); 
    assertEquals("From: Kirjat line: 344", kirja5.toString(), kirjat.anna(4).toString()); 
    assertEquals("From: Kirjat line: 345", kirja2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 346", kirja4, kirjat.anna(3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa370 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa370() throws SailoException {    // Kirjat: 370
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    assertEquals("From: Kirjat line: 374", 0, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 375", 1, kirjat.getLkm()); 
    kirjat.lisaa(kirja2); assertEquals("From: Kirjat line: 376", 2, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 377", 3, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 378", kirja1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 379", kirja2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 380", kirja1, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 381", false, kirjat.anna(1) == kirja1); 
    assertEquals("From: Kirjat line: 382", true, kirjat.anna(1) == kirja2); 
    try {
    assertEquals("From: Kirjat line: 383", kirja1, kirjat.anna(3)); 
    fail("Kirjat: 383 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 384", 4, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 385", 5, kirjat.getLkm()); 
    Kirja kirja6 = new Kirja(); 
    kirjat.lisaa(kirja6); assertEquals("From: Kirjat line: 387", 6, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 388", 10, kirjat.taulukonKoko()); 
    kirjat.lisaa(kirja6); kirjat.lisaa(kirja6); kirjat.lisaa(kirja6); 
    kirjat.lisaa(kirja6); kirjat.lisaa(kirja6); 
    assertEquals("From: Kirjat line: 391", 20, kirjat.taulukonKoko()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa411 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa411() throws SailoException {    // Kirjat: 411
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja11 = new Kirja(); kirjat.lisaa(kirja11); 
    Kirja kirja22 = new Kirja(); kirjat.lisaa(kirja22); 
    kirja11.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|1993|otava|123-456-0-33333-2| kauhu|"); 
    kirja22.parse("2|T채채ll채 pohjant채hden alla|jaakko jaakonpoika|suomi   |2004|WSOY|343-467-0-23456-1 | fantasia|"); 
    Kirja kirja33 = new Kirja(); 
    kirja33.parse("3|Tuntematon sotilas      |kissa kirjoittaja |suomi   |1985|WSOY|752-123-2-34658-5 | kaunokirjallisuus|"); 
    Kirja kirja44 = new Kirja(); 
    kirja44.parse("1|Rautatie |Juhani Aho|"); 
    assertEquals("From: Kirjat line: 422", kirja11, kirjat.anna(0)); 
    kirjat.korvaaTaiLisaa(kirja33); 
    assertEquals("From: Kirjat line: 424", kirja33, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 425", 3, kirjat.getLkm()); 
    kirjat.korvaaTaiLisaa(kirja44); 
    assertEquals("From: Kirjat line: 427", kirja44.toString(), kirjat.anna(0).toString()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKasvataTaulukko446 
   * @throws SailoException when error
   */
  @Test
  public void testKasvataTaulukko446() throws SailoException {    // Kirjat: 446
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    assertEquals("From: Kirjat line: 450", 0, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 451", 1, kirjat.getLkm()); 
    kirjat.lisaa(kirja2); assertEquals("From: Kirjat line: 452", 2, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 453", 3, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 454", 4, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 455", 5, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 456", 5, kirjat.taulukonKoko()); 
    Kirja kirja6 = new Kirja(); 
    kirjat.lisaa(kirja6); assertEquals("From: Kirjat line: 458", 6, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 459", 10, kirjat.taulukonKoko()); 
    kirjat.lisaa(kirja6); kirjat.lisaa(kirja6); kirjat.lisaa(kirja6); 
    kirjat.lisaa(kirja6); kirjat.lisaa(kirja6); 
    assertEquals("From: Kirjat line: 462", 20, kirjat.taulukonKoko()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLaskeTilastot542 
   * @throws SailoException when error
   */
  @Test
  public void testLaskeTilastot542() throws SailoException {    // Kirjat: 542
    ByteArrayOutputStream outContent = new ByteArrayOutputStream(); 
    PrintStream ps = new PrintStream(outContent, true); 
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|taru sormusten herrasta |essi esimerkki    |englanti|otava|1993|123-456-0-33333-2 |150 | kauhu|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|T채채ll채 pohjant채hden alla|jaakko jaakonpoika|suomi   |WSOY |2004|343-467-0-23456-1 |200 |fantasia|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("3|Tuntematon sotilas      |essi esimerkki    |suomi   |WSOY |1985|752-123-2-34658-5 |489 |kaunokirjallisuus|"); 
    Kirja kirja4 = new Kirja(); kirja4.parse("4|Rautatie                |Juhani Aho"); 
    Kirja kirja5 = new Kirja(); kirja5.parse("5|Harry Potter            |Rowling"); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); kirjat.lisaa(kirja4); kirjat.lisaa(kirja5); 
    kirjat.laskeTilastot(ps); 
    String vastaus = ("Kirjoja on kirjastossa: 5\r\n" +
    "Eniten kirjoja on kirjoittanut: essi esimerkki\r\n" +
    "Suosituin genre on: kauhu\r\n" +
    "Pisin kirja on: Tuntematon sotilas\r\n" +
    "Tuorein julkaistu kirja on: T채채ll채 pohjant채hden alla\r\n"); 
    assertEquals("From: Kirjat line: 561", true, outContent.toString().equals(vastaus)); 
  } // Generated by ComTest END
}